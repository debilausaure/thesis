@misc{mozRR,
  doi = {10.48550/ARXIV.1705.05937},
  url = {https://arxiv.org/abs/1705.05937},
  author = {O'Callahan, Robert and Jones, Chris and Froyd, Nathan and Huey, Kyle and Noll, Albert and Partush, Nimrod},
  keywords = {Programming Languages (cs.PL), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Engineering Record And Replay For Deployability: Extended Technical Report},
  publisher = {arXiv},
  year = {2017},
  copyright = {Creative Commons Attribution 4.0 International}
}

@inproceedings{gu2011certikos,
  title={CertiKOS: A certified kernel for secure cloud computing},
  author={Gu, Liang and Vaynberg, Alexander and Ford, Bryan and Shao, Zhong and Costanzo, David},
  booktitle={Proceedings of the Second Asia-Pacific Workshop on Systems},
  pages={1--5},
  year={2011}
}

@article{concurrentcertikos,
  author = {Gu, Ronghui and Shao, Zhong and Chen, Hao and Kim, Jieung and Koenig, J\'{e}r\'{e}mie and Wu, Xiongnan (Newman) and Sj\"{o}berg, Vilhelm and Costanzo, David},
  title = {Building Certified Concurrent OS Kernels},
  year = {2019},
  issue_date = {October 2019},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {62},
  number = {10},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/3356903},
  doi = {10.1145/3356903},
  journal = {Commun. ACM},
  month = {sep},
  pages = {89\u201399},
  numpages = {11}
}

@inproceedings{gu2016certikos,
  title={CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels},
  author={Gu, Ronghui and Shao, Zhong and Chen, Hao and Wu, Xiongnan Newman and Kim, Jieung and Sj{\"o}berg, Vilhelm and Costanzo, David},
  booktitle={12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16)},
  pages={653--669},
  year={2016}
}

@inproceedings{gu2015deep,
    author = {Gu, Ronghui and Koenig, J\'{e}r\'{e}mie and Ramananandro, Tahina and Shao, Zhong and Wu, Xiongnan (Newman) and Weng, Shu-Chun and Zhang, Haozhong and Guo, Yu},
    title = {Deep Specifications and Certified Abstraction Layers},
    year = {2015},
    isbn = {9781450333009},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2676726.2676975},
    doi = {10.1145/2676726.2676975},
    abstract = {Modern computer systems consist of a multitude of abstraction layers (e.g., OS kernels, hypervisors, device drivers, network protocols), each of which defines an interface that hides the implementation details of a particular set of functionality. Client programs built on top of each layer can be understood solely based on the interface, independent of the layer implementation. Despite their obvious importance, abstraction layers have mostly been treated as a system concept; they have almost never been formally specified or verified. This makes it difficult to establish strong correctness properties, and to scale program verification across multiple layers.In this paper, we present a novel language-based account of abstraction layers and show that they correspond to a strong form of abstraction over a particularly rich class of specifications which we call deep specifications. Just as data abstraction in typed functional languages leads to the important representation independence property, abstraction over deep specification is characterized by an important implementation independence property: any two implementations of the same deep specification must have contextually equivalent behaviors. We present a new layer calculus showing how to formally specify, program, verify, and compose abstraction layers. We show how to instantiate the layer calculus in realistic programming languages such as C and assembly, and how to adapt the CompCert verified compiler to compile certified C layers such that they can be linked with assembly layers. Using these new languages and tools, we have successfully developed multiple certified OS kernels in the Coq proof assistant, the most realistic of which consists of 37 abstraction layers, took less than one person year to develop, and can boot a version of Linux as a guest.},
    booktitle = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
    pages = {595–608},
    numpages = {14},
    keywords = {certified compilers, modularity, certified os kernels, program verification, deep specification, abstraction layer},
    location = {Mumbai, India},
    series = {POPL '15}
}
  
@online{armpointerauth,
  author = {Alan Mujumdar},
  title = {Armv8.1-M Pointer Authentication and Branch Target Identification Extension},
  urldate = {2022-09-27},
  year = {2021},
  url = {https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/armv8-1-m-pointer-authentication-and-branch-target-identification-extension}
}

@online{intelpointerauth,
  author = {Anati, Ittai and Simhon, Oren Ben and Intel},
  title = {Control Flow Enforcement Technology (CET)},
  subtitle = {Slides of a talk given at CATC 2017},
  urldate = {2022-09-27},
  year = {2017},
  url = {https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf}
}

@inproceedings{compilerpointerauth,
  title={Enforcing Forward-Edge Control-Flow Integrity in GCC \& LLVM},
  author={Tice, Caroline and Roeder, Tom and Collingbourne, Peter and Checkoway, Stephen and Erlingsson, {\'U}lfar and Lozano, Luis and Pike, Geoff},
  booktitle={23rd USENIX security symposium (USENIX security 14)},
  pages={941--955},
  year={2014}
}


@inproceedings{microarchitecturalbypass,
  title={Prefetch side-channel attacks: Bypassing SMAP and kernel ASLR},
  author={Gruss, Daniel and Maurice, Cl{\'e}mentine and Fogh, Anders and Lipp, Moritz and Mangard, Stefan},
  booktitle={Proceedings of the 2016 ACM SIGSAC conference on computer and communications security},
  pages={368--379},
  year={2016}
}

@online{bypasskaslr,
  author = {Andy TheFlow Nguyen},
  title = {Turning \texttt{\textbackslash{}x00\textbackslash{}x00} into 10000\$},
  subtitle = {CVE-2021-22555},
  urldate = {2022-09-27},
  year = {2021},
  url = {https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html#bypassing-kaslrsmep}
}

@online{kaslrbypass,
  author = {Seth Jenkis},
  title = {Bringing back the stack attack},
  subtitle = {CVE-2022-42703},
  urldate = {2022-12-11},
  year = {2022},
  url = {https://googleprojectzero.blogspot.com/2022/12/exploiting-CVE-2022-42703-bringing-back-the-stack-attack.html}
}

@online{webkitexploit,
  author = {Samuel saelo Groß},
  title = {Exploit for a WebKit JIT optimization bug used during Pwn2Own 2018},
  subtitle = {CVE-2018-4233},
  urldate = {2022-09-27},
  year = {2018},
  url = {https://github.com/saelo/cve-2018-4233}
}

@online{switchbug,
  author = {plutoo},
  title = {A one-in-a-million bug in Switch kernel},
  urldate = {2022-09-27},
  year = {2022},
  url = {https://gist.githubusercontent.com/plutooo/2aadbd4a718e269df474079dd2e584fb/raw/7b3af77b5202366c8934c88ef251f1e905967040/gistfile1.txt}
}

@online{ps4bug,
  author = {Andy TheFlow Nguyen},
  title = {Use-After-Free In \texttt{IPV6\_2292PKTOPTIONS} leading To Arbitrary Kernel R/W Primitives},
  subtitle = {CVE-2020-7457},
  urldate = {2022-09-27},
  year = {2020},
  url = {https://hackerone.com/reports/826026}
}

@online{ps5bug,
  author = {Andy TheFlow Nguyen},
  title = {Use-After-Free In \texttt{IPV6\_2292PKTOPTIONS} leading To Arbitrary Kernel R/W Primitives},
  subtitle = {CVE-2020-7457},
  urldate = {2022-09-27},
  year = {2022},
  url = {https://hackerone.com/reports/1441103}
}

@article{sel4wcet,
  title={High-assurance timing analysis for a high-assurance real-time operating system},
  author={Sewell, Thomas and Kam, Felix and Heiser, Gernot},
  journal={Real-Time Systems},
  volume={53},
  number={5},
  pages={812--853},
  year={2017},
  publisher={Springer}
}

@online{certikoswebsite,
  author = {CertiKOS},
  title = {CertiKOS},
  subtitle = {Certified Kit Operating System},
  urldate = {2022-09-23},
  year = {2022},
  url = {https://flint.cs.yale.edu/certikos/index.html}
}

@online{sel4website,
  author = {seL4},
  title = {seL4 Project website},
  subtitle = {The seL4® Microkernel - Security is no excuse for bad performance},
  urldate = {2022-09-23},
  year = {2022},
  url = {https://sel4.systems/}
}

@online{sel4hardware,
  author = {seL4},
  title = {seL4 - Hardware support},
  subtitle = {seL4 supported platforms and verification status},
  urldate = {2022-09-23},
  year = {2022},
  url = {https://docs.sel4.systems/Hardware}
}

@inproceedings{sel4binary,
  title={Translation validation for a verified OS kernel},
  author={Sewell, Thomas Arthur Leck and Myreen, Magnus O and Klein, Gerwin},
  booktitle={Proceedings of the 34th ACM SIGPLAN conference on Programming language design and implementation},
  pages={471--482},
  year={2013}
}

@inproceedings{sel4,
  title={seL4: Formal verification of an OS kernel},
  author={Klein, Gerwin and Elphinstone, Kevin and Heiser, Gernot and Andronick, June and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and others},
  booktitle={Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles},
  pages={207--220},
  year={2009}
}

@inproceedings{sel4integrity,
  title={seL4 enforces integrity},
  author={Sewell, Thomas and Winwood, Simon and Gammie, Peter and Murray, Toby and Andronick, June and Klein, Gerwin},
  booktitle={International Conference on Interactive Theorem Proving},
  pages={325--340},
  year={2011},
  organization={Springer}
}

@online{digger,
  author = {Hym, Samuel and Oudjail, Veïs},
  title = {Digger},
  subtitle = {A tool to convert C-style Gallina into the corresponding C code},
  urldate = {2022-09-21},
  url = {https://gitlab.univ-lille.fr/2xs/digger}
}

@book{capabilities,
author = {Levy, Henry M.},
title = {Capability-Based Computer Systems},
year = {1984},
isbn = {0932376223},
publisher = {Butterworth-Heinemann},
address = {USA}
}

@InProceedings{elpi,
  author="Dunchev, Cvetan
  and Guidi, Ferruccio
  and Sacerdoti Coen, Claudio
  and Tassi, Enrico",
  editor="Davis, Martin
  and Fehnker, Ansgar
  and McIver, Annabelle
  and Voronkov, Andrei",
  title="ELPI: Fast, Embeddable, $\lambda$Prolog Interpreter",
  booktitle="Logic for Programming, Artificial Intelligence, and Reasoning",
  year="2015",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="460--468",
  isbn="978-3-662-48899-7"
}

@book{mac2013categories,
  title={Categories for the working mathematician},
  author={Mac Lane, Saunders},
  volume={5},
  year={1971},
  publisher={Springer Science \& Business Media}
}

@article{Leroy-backend,
  author = {Xavier Leroy},
  title = {A formally verified compiler back-end},
  journal = {Journal of Automated Reasoning},
  volume = 43,
  number = 4,
  pages = {363--446},
  year = 2009,
  url = {http://xavierleroy.org/publi/compcert-backend.pdf},
  urlpublisher = {http://dx.doi.org/10.1007/s10817-009-9155-4},
  hal = {http://hal.inria.fr/inria-00360768/},
  pubkind = {journal-int-mono}
}

@online{compcert_online,
  author = {Project, CompCert and Leroy, Xavier},
  title = {Context and motivations},
  subtitle = {Formal Verification of Compilers},
  urldate = {2022-09-16},
  url = {https://compcert.org/motivations.html}
}

@manual{intel_stack_switch,
  title={Intel IA-32 Architecture Software Developer’s Manual Vol. 3A},
  author = {Intel},
  organization={Intel},
  year={2019},
  note={Section 5.8.5 - Stack Switching}
}

@manual{intel_idt_gates,
  title={Intel IA-32 Architecture Software Developer’s Manual Vol. 3A},
  author = {Intel},
  organization={Intel},
  year={2019},
  note={Section 6.11 - IDT Descriptors}
}

@manual{intel_32bits_paging,
  title={Intel IA-32 Architecture Software Developer’s Manual Vol. 3A},
  author = {Intel},
  organization={Intel},
  year={2019},
  note={Section 4.3 - 32-Bit Paging - Figure 4.2}
}

@manual{intel_paging_rights,
  title={Intel IA-32 Architecture Software Developer’s Manual Vol. 3A},
  author = {Intel},
  organization={Intel},
  year={2019},
  note={Section 4.6 - Access Rights}
}

@manual{intel_interrupt_stack,
  title={Intel IA-32 Architecture Software Developer’s Manual Vol. 3A},
  author = {Intel},
  organization={Intel},
  year={2019},
  note={Section 6.13 - Figure 6.4}
}

@book{isabellehol,
  title={Isabelle/HOL: a proof assistant for higher-order logic},
  author={Nipkow, Tobias and Wenzel, Markus and Paulson, Lawrence C},
  year={2002},
  publisher={Springer}
}

@online{fstar,
  author = {Microsoft Research and Inria},
  title = {F* : a Proof-Oriented Programming Language},
  urldate = {2022-10-22},
  url = {https://fstar-lang.org/}
}

@online{coq,
  author = {Coquand, Thierry and Huet, Gérard and Paulin, Christine, and al.},
  title = {The Coq Proof Assistant},
  urldate = {2022-10-22},
  url = {https://coq.inria.fr/}
}

@inproceedings{lean,
  title={The Lean theorem prover (system description)},
  author={Moura, Leonardo de and Kong, Soonho and Avigad, Jeremy and Doorn, Floris van and Raumer, Jakob von},
  booktitle={International Conference on Automated Deduction},
  pages={378--388},
  year={2015},
  organization={Springer}
}

@inproceedings{agda,
  title={A brief overview of Agda--a functional language with dependent types},
  author={Bove, Ana and Dybjer, Peter and Norell, Ulf},
  booktitle={International Conference on Theorem Proving in Higher Order Logics},
  pages={73--78},
  year={2009},
  organization={Springer}
}

@article{isomorphismhoward,
  title={The formulae-as-types notion of construction},
  author={Howard, William A},
  journal={To HB Curry: essays on combinatory logic, lambda calculus and formalism},
  volume={44},
  pages={479--490},
  year={1980}
}

@book{isomorphismcurryfeys,
  title={Combinatory logic},
  author={Curry, Haskell Brooks and Feys, Robert and Craig, William and Hindley, J Roger and Seldin, Jonathan P},
  volume={1},
  year={1958},
  publisher={North-Holland Amsterdam}
}

@article{isomorphismcurry,
  title={Functionality in combinatory logic},
  author={Curry, Haskell B},
  journal={Proceedings of the National Academy of Sciences},
  volume={20},
  number={11},
  pages={584--590},
  year={1934},
  publisher={National Acad Sciences}
}

@inproceedings{refinementparadox,
  title={Security specifications},
  author={Jacob, Jeremy},
  booktitle={Proceedings. 1988 IEEE Symposium on Security and Privacy},
  pages={14--14},
  year={1988},
  organization={IEEE Computer Society}
}

@inproceedings{refinementparadoxsolution,
  title={The shadow knows: Refinement of ignorance in sequential programs},
  author={Morgan, Carroll},
  booktitle={International Conference on Mathematics of Program Construction},
  pages={359--378},
  year={2006},
  organization={Springer}
}

@book{refinement,
  title={Data refinement: model-oriented proof methods and their comparison},
  author={De Roever, Willem-Paul and Engelhardt, Kai and Buth, Karl-Heinz},
  number={47},
  year={1998},
  publisher={Cambridge University Press}
}

@manual{arm32_bit_callconv,
  title={ABI for the Arm 32-bit Architecture},
  subtitle={Procedure Call Standard for the Arm Architecture},
  author={Arm Software},
  organization={Arm software},
  year={2022},
  note={Section 6 - The Base Procedure Call Standard}
}

@article{racerX,
  title={RacerX: Effective, static detection of race conditions and deadlocks},
  author={Engler, Dawson and Ashcraft, Ken},
  journal={ACM SIGOPS operating systems review},
  volume={37},
  number={5},
  pages={237--252},
  year={2003},
  publisher={ACM New York, NY, USA}
}

@inproceedings{sdracer,
  title={Automatic detection and validation of race conditions in interrupt-driven embedded software},
  author={Wang, Yu and Wang, Linzhang and Yu, Tingting and Zhao, Jianhua and Li, Xuandong},
  booktitle={Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages={113--124},
  year={2017}
}

@inproceedings{separationlogic,
  title={Separation logic: A logic for shared mutable data structures},
  author={Reynolds, John C},
  booktitle={Proceedings 17th Annual IEEE Symposium on Logic in Computer Science},
  pages={55--74},
  year={2002},
  organization={IEEE}
}

@inproceedings{partialx,
  title={End-to-end mechanized proof of an ebpf virtual machine for micro-controllers},
  author={Yuan, Shenghao and Besson, Frédéric and Talpin, Jean-Pierre and Hym, Samuel and Zandberg, Koen and Baccelli, Emmanuel},
  booktitle={International Conference on Computer Aided Verification},
  pages={293--316},
  year={2022},
  organization={Springer}
}

@online{partialxrepo,
  author = {Hym, Samuel},
  title = {$\partial x$},
  subtitle = {A tool to derive (hence the name) C code from a monadic Gallina code},
  urldate = {2022-10-23},
  url = {https://gitlab.univ-lille.fr/samuel.hym/dx}
}

@book{stankovic2012deadline,
  title={Deadline scheduling for real-time systems: EDF and related algorithms},
  author={Stankovic, John A and Spuri, Marco and Ramamritham, Krithi and Buttazzo, Giorgio C},
  volume={460},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@article{reid2017guards,
  title={Who guards the guards? Formal validation of the Arm v8-M architecture specification},
  author={Reid, Alastair},
  journal={Proceedings of the ACM on Programming Languages},
  volume={1},
  number={OOPSLA},
  pages={1--24},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@article{metacoq,
  title={The metacoq project},
  author={Sozeau, Matthieu and Anand, Abhishek and Boulier, Simon and Cohen, Cyril and Forster, Yannick and Kunze, Fabian and Malecha, Gregory and Tabareau, Nicolas and Winterhalter, Th{\'e}o},
  journal={Journal of automated reasoning},
  volume={64},
  number={5},
  pages={947--999},
  year={2020},
  publisher={Springer}
}

@inproceedings{oeuf,
author = {Mullen, Eric and Pernsteiner, Stuart and Wilcox, James R. and Tatlock, Zachary and Grossman, Dan},
title = {Oeuf: Minimizing the Coq Extraction TCB},
year = {2018},
isbn = {9781450355865},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/3167089},
abstract = {Verifying systems by implementing them in the programming language of a proof assistant (e.g., Gallina for Coq) lets us directly leverage the full power of the proof assistant for verifying the system. But, to execute such an implementation requires extraction, a large complicated process that is in the trusted computing base (TCB). This paper presents undefineduf, a verified compiler from a subset of Gallina to assembly. undefineduf’s correctness theorem ensures that compilation preserves the semantics of the source Gallina program. We describe how oeuf’s specification can be used as a foreign function interface to reason about the interaction between compiled Gallina programs and surrounding shim code. Additionally, undefinedufmaintains a small TCB for its front-end by reflecting Gallina programs to undefinedufsource and automatically ensuring equivalence using computational denotation. This design enabled us to implement some early compiler passes (e.g., lambda lifting) in the untrusted reflection and ensure their correctness via translation validation. To evaluate undefineduf, we compile Appel’s SHA256 specification from Gallina to x86 and write a shim for the generated code, yielding a verified sha256sum implementation with a small TCB.},
booktitle = {Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {172–185},
numpages = {14},
keywords = {Coq, Formal Verification, Compilers, Verified Systems},
location = {Los Angeles, CA, USA},
series = {CPP 2018}
}

@inproceedings{anand2017certicoq,
  title={CertiCoq: A verified compiler for Coq},
  author={Anand, Abhishek and Appel, Andrew and Morrisett, Greg and Paraskevopoulou, Zoe and Pollack, Randy and Belanger, Olivier Savary and Sozeau, Matthieu and Weaver, Matthew},
  booktitle={The third international workshop on Coq for programming languages (CoqPL)},
  year={2017}
}

@inproceedings{refinedC,
author = {Sammler, Michael and Lepigre, Rodolphe and Krebbers, Robbert and Memarian, Kayvan and Dreyer, Derek and Garg, Deepak},
title = {RefinedC: Automating the Foundational Verification of C Code with Refined Ownership Types},
year = {2021},
isbn = {9781450383912},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3453483.3454036},
doi = {10.1145/3453483.3454036},
abstract = {Given the central role that C continues to play in systems software, and the difficulty
of writing safe and correct C code, it remains a grand challenge to develop effective
formal methods for verifying C programs. In this paper, we propose a new approach
to this problem: a type system we call RefinedC, which combines ownership types (for
modular reasoning about shared state and concurrency) with refinement types (for encoding
precise invariants on C data types and Hoare-style specifications for C functions).
RefinedC is both automated (requiring minimal user intervention) and foundational
(producing a proof of program correctness in Coq), while at the same time handling
a range of low-level programming idioms such as pointer arithmetic. In particular,
following the approach of RustBelt, the soundness of the RefinedC type system is justified
semantically by interpretation into the Coq-based Iris framework for higher-order
concurrent separation logic. However, the typing rules of RefinedC are also designed
to be encodable in a new “separation logic programming” language we call Lithium.
By restricting to a carefully chosen (yet expressive) fragment of separation logic,
Lithium supports predictable, automatic, goal-directed proof search without backtracking.
We demonstrate the effectiveness of RefinedC on a range of representative examples
of C code.},
booktitle = {Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
pages = {158–174},
numpages = {17},
keywords = {Coq, Iris, ownership types, refinement types, proof automation, C programming language, separation logic},
location = {Virtual, Canada},
series = {PLDI 2021}
}

@article{cao2018vst,
  title={VST-Floyd: A separation logic tool to verify correctness of C programs},
  author={Cao, Qinxiang and Beringer, Lennart and Gruetter, Samuel and Dodds, Josiah and Appel, Andrew W},
  journal={Journal of Automated Reasoning},
  volume={61},
  number={1},
  pages={367--422},
  year={2018},
  publisher={Springer}
}

@book{categorytheoryforprogrammers,
  title={Category theory for programmers},
  author={Milewski, Bartosz},
  year={2019},
  publisher={Bartosz Milewski},
  url={https://github.com/hmemcpy/milewski-ctfp-pdf}
}

@article{kocher2020spectre,
  title={Spectre attacks: Exploiting speculative execution},
  author={Kocher, Paul and Horn, Jann and Fogh, Anders and Genkin, Daniel and Gruss, Daniel and Haas, Werner and Hamburg, Mike and Lipp, Moritz and Mangard, Stefan and Prescher, Thomas and others},
  journal={Communications of the ACM},
  volume={63},
  number={7},
  pages={93--101},
  year={2020},
  publisher={ACM New York, NY, USA}
}

@article{lipp2020meltdown,
  title={Meltdown: Reading kernel memory from user space},
  author={Lipp, Moritz and Schwarz, Michael and Gruss, Daniel and Prescher, Thomas and Haas, Werner and Horn, Jann and Mangard, Stefan and Kocher, Paul and Genkin, Daniel and Yarom, Yuval and others},
  journal={Communications of the ACM},
  volume={63},
  number={6},
  pages={46--56},
  year={2020},
  publisher={ACM New York, NY, USA}
}

@inproceedings{schumilo2017kafl,
  title={$\{$kAFL$\}$:$\{$Hardware-Assisted$\}$ Feedback Fuzzing for $\{$OS$\}$ Kernels},
  author={Schumilo, Sergej and Aschermann, Cornelius and Gawlik, Robert and Schinzel, Sebastian and Holz, Thorsten},
  booktitle={26th USENIX Security Symposium (USENIX Security 17)},
  pages={167--182},
  year={2017}
}

@article{jung2017rustbelt,
  title={RustBelt: Securing the foundations of the Rust programming language},
  author={Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
  journal={Proceedings of the ACM on Programming Languages},
  volume={2},
  number={POPL},
  pages={1--34},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@article{matsakis2014rust,
  title={The rust language},
  author={Matsakis, Nicholas D and Klock, Felix S},
  journal={ACM SIGAda Ada Letters},
  volume={34},
  number={3},
  pages={103--104},
  year={2014},
  publisher={ACM New York, NY, USA}
}

@online{rustwebsite,
  author = {The Rust Foundation (formerly Mozilla)},
  title = {Rust Programming Language},
  subtitle = {A language empowering everyone to build reliable and efficient software.},
  urldate = {2022-12-15},
  url = {https://www.rust-lang.org/}
}

@article{ball2006thorough,
  title={Thorough static analysis of device drivers},
  author={Ball, Thomas and Bounimova, Ella and Cook, Byron and Levin, Vladimir and Lichtenberg, Jakob and McGarvey, Con and Ondrusek, Bohus and Rajamani, Sriram K and Ustuner, Abdullah},
  journal={ACM SIGOPS Operating Systems Review},
  volume={40},
  number={4},
  pages={73--85},
  year={2006},
  publisher={ACM New York, NY, USA}
}

@article{baldoni2018survey,
  title={A survey of symbolic execution techniques},
  author={Baldoni, Roberto and Coppa, Emilio and D’elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
  journal={ACM Computing Surveys (CSUR)},
  volume={51},
  number={3},
  pages={1--39},
  year={2018},
  publisher={ACM New York, NY, USA}
}

@article{netzer1992race,
  title={What are race conditions? Some issues and formalizations},
  author={Netzer, Robert HB and Miller, Barton P},
  journal={ACM Letters on Programming Languages and Systems (LOPLAS)},
  volume={1},
  number={1},
  pages={74--88},
  year={1992},
  publisher={ACM New York, NY, USA}
}

@inproceedings{dejon2022mmu,
  title={From MMU to MPU: adaptation of the Pip kernel to constrained devices},
  author={Dejon, Nicolas and Gaber, Chrystel and Grimaud, Gilles},
  booktitle={3rd International Conference on Internet of Things \& Embedded Systems (IoTE 2022)},
  year={2022}
}

@article{liu1973scheduling,
  title={Scheduling algorithms for multiprogramming in a hard-real-time environment},
  author={Liu, Chung Laung and Layland, James W},
  journal={Journal of the ACM (JACM)},
  volume={20},
  number={1},
  pages={46--61},
  year={1973},
  publisher={ACM New York, NY, USA}
}

@article{audsley1990deadline,
  title={Deadline monotonic scheduling},
  author={Audsley, Neil C and Burns, Alan and Richardson, MF and Wellings, AJ},
  year={1990},
  publisher={University of York, Department of Computer Science York, UK}
}

@article{leung1982complexity,
  title={On the complexity of fixed-priority scheduling of periodic, real-time tasks},
  author={Leung, Joseph Y-T and Whitehead, Jennifer},
  journal={Performance evaluation},
  volume={2},
  number={4},
  pages={237--250},
  year={1982},
  publisher={Elsevier}
}

@book{buttazzo2011hard,
  title={Hard real-time computing systems: predictable scheduling algorithms and applications},
  author={Buttazzo, Giorgio C},
  volume={24},
  year={2011},
  publisher={Springer Science \& Business Media}
}

@article{kay1988fair,
  title={A fair share scheduler},
  author={Kay, Judy and Lauder, Piers},
  journal={Communications of the ACM},
  volume={31},
  number={1},
  pages={44--55},
  year={1988},
  publisher={ACM New York, NY, USA}
}

@article{nuyens2008foreground,
  title={The foreground--background queue: a survey},
  author={Nuyens, Misja and Wierman, Adam},
  journal={Performance evaluation},
  volume={65},
  number={3-4},
  pages={286--307},
  year={2008},
  publisher={Elsevier}
}

@inproceedings{alsa2008shortest,
  title={Shortest remaining response time scheduling for improved web server performance},
  author={AlSa’deh, Ahmad and Yahya, Adnan H},
  booktitle={International Conference on Web Information Systems and Technologies},
  pages={80--92},
  year={2008},
  organization={Springer}
}

@inproceedings{yao1995scheduling,
  title={A scheduling model for reduced CPU energy},
  author={Yao, Frances and Demers, Alan and Shenker, Scott},
  booktitle={Proceedings of IEEE 36th annual foundations of computer science},
  pages={374--382},
  year={1995},
  organization={IEEE}
}

@inproceedings{brandenburg2009implementation,
  title={On the implementation of global real-time schedulers},
  author={Brandenburg, Bj{\"o}rn B and Anderson, James H},
  booktitle={2009 30th IEEE Real-Time Systems Symposium},
  pages={214--224},
  year={2009},
  organization={IEEE}
}

@article{seplogic,
  author = {O'Hearn, Peter},
  title = {Separation Logic},
  year = {2019},
  issue_date = {February 2019},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {62},
  number = {2},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/3211968},
  doi = {10.1145/3211968},
  abstract = {Separation logic is a key development in formal reasoning about programs, opening up new lines of attack on longstanding problems.},
  journal = {Commun. ACM},
  month = {jan},
  pages = {86–95},
  numpages = {10}
}
